#!/usr/bin/env python3

import argparse
import difflib
import os
import subprocess

parser = argparse.ArgumentParser(description="Glorp Regression Tester")
parser.add_argument(
    "tests",
    nargs="*",
    help="Path to test, defaults to '.'",
    default=["."],
)
parser.add_argument(
    "-u",
    "--update",
    dest="update",
    action="store_true",
    help="update test expected with test output",
)
parser.add_argument(
    "-v",
    "--verbose",
    dest="verbose",
    action="store_true",
    help="verbose mode",
)

args = parser.parse_args()

test_sentinal = "##############"

test_files = []

while args.tests:
    test = args.tests.pop()
    if os.path.isfile(test) and test.endswith(".glorp") and os.access(test, os.X_OK):
        test_files.append(test)
    elif os.path.isdir(test):
        args.tests.extend([os.path.join(test, p) for p in os.listdir(test)])

passed = 0
skipped = 0
failed = 0

for test_file in test_files:
    test = subprocess.run(
        args=f"sh {test_file}",
        shell=True,
        capture_output=True,
        text=True,
    )

    with open(test_file, "r") as file:
        contents = file.read()
        try:
            [test_content, test_assertions] = contents.split(test_sentinal)
        except:
            test_content = contents
            test_assertions = None
            pass

    if args.update:
        with open(test_file, "w") as file:
            file.write(test_content.strip() + "\n\n")
            file.write(test_sentinal + "\n")
            file.write(
                f"# NOTE: the following assertions are auto-generated by {parser.prog}\n"
            )
            file.write("#\n")
            for line in test.stdout.splitlines(keepends=True):
                file.write(f"# {line}")

        continue

    if test_assertions is None:
        skipped += 1
        print(f"SKIP: {test_file}")
        continue

    lines = test_assertions.strip().splitlines(keepends=True)[2:]
    expected = [line[2:] for line in lines]

    got = test.stdout.strip().splitlines(keepends=True)

    diff = "".join(
        difflib.unified_diff(expected, got, fromfile="expected", tofile="got")
    )

    if diff == "":
        passed += 1
        print(f"PASS: {test_file}")
    else:
        failed += 1
        print(f"FAIL: {test_file}")

        if args.verbose:
            print(diff)

if not args.update:
    print()
    print(f"Passed:  {passed}")
    print(f"Skipped: {skipped}")
    print(f"Failed:  {failed}")
